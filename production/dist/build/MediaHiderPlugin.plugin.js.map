{"version":3,"file":"./build/MediaHiderPlugin.plugin.js","mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,gCAAY;AACxB;AACA,KAAK,qBAAM;AACX;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB,iDAAsB;AACtC;AACA;AACA;AACA,mCAAmC,4FAAsC;AACzE;AACA;AACA;AACA,4BAA4B,iDAAsB;AAClD;AACA;AACA;AACA,+CAA+C,4FAAsC;AACrF;AACA;AACA;AACA,wCAAwC,kDAAuB;AAC/D,4CAA4C,+CAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,gCAAgC,kDAAuB;AACvD,oCAAoC,+CAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kBAAkB,qBAAM;AACxB;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD,sBAAsB,SAAS;AAC/B;AACA,cAAc,cAAcmEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvkDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,uCAAuC;AACvC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EAAE,qBAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yBAAyB;AAC3D;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;;;;;;;;;;ACjuBA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://plugin/./node_modules/electron/index.js","webpack://plugin/./crudApi.ts","webpack://plugin/./helpers/apiHelper.ts","webpack://plugin/./helpers/makeLog.ts","webpack://plugin/./src/MediaHiderPlugin.plugin.js","webpack://plugin/ignored|C:\\Users\\User\\Desktop\\Codestuff\\react\\MediaHiderPlugin\\production\\node_modules\\electron|fs","webpack://plugin/ignored|C:\\Users\\User\\Desktop\\Codestuff\\react\\MediaHiderPlugin\\production\\node_modules\\electron|path","webpack://plugin/ignored|C:\\Users\\User\\Desktop\\Codestuff\\react\\MediaHiderPlugin\\production\\src|fs","webpack://plugin/ignored|C:\\Users\\User\\Desktop\\Codestuff\\react\\MediaHiderPlugin\\production\\src|path","webpack://plugin/ignored|C:\\Users\\User\\Desktop\\Codestuff\\react\\MediaHiderPlugin\\production\\src|request","webpack://plugin/webpack/bootstrap","webpack://plugin/webpack/runtime/define property getters","webpack://plugin/webpack/runtime/global","webpack://plugin/webpack/runtime/hasOwnProperty shorthand","webpack://plugin/webpack/runtime/make namespace object","webpack://plugin/webpack/before-startup","webpack://plugin/webpack/startup","webpack://plugin/webpack/after-startup"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst pathFile = path.join(__dirname, 'path.txt');\n\nfunction getElectronPath () {\n  let executablePath;\n  if (fs.existsSync(pathFile)) {\n    executablePath = fs.readFileSync(pathFile, 'utf-8');\n  }\n  if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {\n    return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || 'electron');\n  }\n  if (executablePath) {\n    return path.join(__dirname, 'dist', executablePath);\n  } else {\n    throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again');\n  }\n}\n\nmodule.exports = getElectronPath();\n","import HashedObject from \"./entities/HashedObject\";\r\nimport { ApiResponse, doRequest } from \"./helpers/apiHelper\";\r\nimport makeLog from \"./helpers/makeLog\";\r\n\r\nconst { log, debug } = makeLog(\"projectService\");\r\n\r\nconst createCacheEntry = async (\r\n    payload: string\r\n): Promise<ApiResponse<string>> => {\r\n    return await doRequest(\"/media\", {\r\n        body: payload,\r\n        method: \"POST\",\r\n    });\r\n};\r\nconst getAllHiddenMediaObjects = async (): Promise<HashedObject[]> => {\r\n    debug(`getHiddenMedia(all)`);\r\n    const { content: HashedObjects } = await doRequest<HashedObject[]>(\r\n        `/hiddenMedia`,\r\n        {}\r\n    );\r\n    return HashedObjects;\r\n};\r\n\r\nconst getHiddenMediaObject = async (url: string): Promise<HashedObject> => {\r\n    debug(`getHiddenMedia(${url})`);\r\n    const { content: HashedObject } = await doRequest<HashedObject>(\r\n        `/hiddenMedia/${url}`,\r\n        {}\r\n    );\r\n    return HashedObject;\r\n};\r\nconst addHiddenMediaObject = async (url: string) => {\r\n    debug(`addHiddenMediaObject(${url})`);\r\n    return await doRequest(`/hiddenMedia/${url}`, {\r\n        body: url,\r\n        method: \"POST\",\r\n    });\r\n};\r\nconst deleteHiddenMediaObject = async (url: string): Promise<string> => {\r\n    debug(`DeleteHashedObject(${url})`);\r\n    await doRequest<string>(`/hiddenmedia/${url}`, {\r\n        body: url,\r\n        method: \"Delete\",\r\n    });\r\n    return url;\r\n};\r\n\r\nexport {\r\n    createCacheEntry,\r\n    getAllHiddenMediaObjects,\r\n    getHiddenMediaObject,\r\n    addHiddenMediaObject,\r\n    deleteHiddenMediaObject,\r\n};\r\n","const API_URL = process.env.REACT_APP_API_URL;\r\n\r\ninterface ApiResponse<T> {\r\n    content: T;\r\n    success: boolean;\r\n    message?: string;\r\n}\r\n\r\ninterface RequestParams {\r\n    method?: string;\r\n    body?: string | any;\r\n    headers?: Headers;\r\n}\r\n/**\r\n * Fetches from provided url and returns as JSON.\r\n * A fetch wrapper with error handling.\r\n */\r\nconst doRequest = async <T>(\r\n    url: string,\r\n    params: RequestParams\r\n): Promise<ApiResponse<T>> => {\r\n    if (typeof params.body !== \"undefined\" && typeof params.body !== \"string\") {\r\n        params.body = JSON.stringify(params.body);\r\n    }\r\n\r\n    const response = await fetch(API_URL + url, params);\r\n\r\n    if (response.status !== 200) {\r\n        throw new Error(\r\n            `Request failed with status ${response.status}: ${response.statusText}`\r\n        );\r\n    }\r\n\r\n    return (await response.json()) as ApiResponse<T>;\r\n};\r\n\r\nexport { doRequest };\r\nexport type { ApiResponse, RequestParams };\r\n","const makeLog = (name: string) => {\r\n    return {\r\n        log: (message: string) =>\r\n            console.log(`[${name.toUpperCase()}]`, message),\r\n        debug: (message: string) =>\r\n            console.debug(`[${name.toUpperCase()}]`, message),\r\n        error: (message: string) =>\r\n            console.error(`[${name.toUpperCase()}]`, message),\r\n    };\r\n};\r\n\r\nexport default makeLog;\r\n","/**\r\n * @name MediaHiderPlugin\r\n * @description Dummy text here\r\n * @version 0.0.1\r\n * @author me\r\n * @authorId example\r\n * @website asdjj\r\n * @source ekkjdf\r\n */\r\n\r\n/*@cc_on\r\n@if (@_jscript)\r\n    \r\n    // Offer to self-install for clueless users that try to run this directly.\r\n    var shell = WScript.CreateObject(\"WScript.Shell\");\r\n    var fs = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n    var pathPlugins = shell.ExpandEnvironmentStrings(\"%APPDATA%\\\\BetterDiscord\\\\plugins\");\r\n    var pathSelf = WScript.ScriptFullName;\r\n    // Put the user at ease by addressing them in the first person\r\n    shell.Popup(\"It looks like you've mistakenly tried to run me directly. \\n(Don't do that!)\", 0, \"I'm a plugin for BetterDiscord\", 0x30);\r\n    if (fs.GetParentFolderName(pathSelf) === fs.GetAbsolutePathName(pathPlugins)) {\r\n        shell.Popup(\"I'm in the correct folder already.\", 0, \"I'm already installed\", 0x40);\r\n    } else if (!fs.FolderExists(pathPlugins)) {\r\n        shell.Popup(\"I can't find the BetterDiscord plugins folder.\\nAre you sure it's even installed?\", 0, \"Can't install myself\", 0x10);\r\n    } else if (shell.Popup(\"Should I copy myself to BetterDiscord's plugins folder for you?\", 0, \"Do you need some help?\", 0x34) === 6) {\r\n        fs.CopyFile(pathSelf, fs.BuildPath(pathPlugins, fs.GetFileName(pathSelf)), true);\r\n        // Show the user where to put plugins in the future\r\n        shell.Exec(\"explorer \" + pathPlugins);\r\n        shell.Popup(\"I'm installed!\", 0, \"Successfully installed\", 0x40);\r\n    }\r\n    WScript.Quit();\r\n\r\n@else@*/\r\nconst config = {\r\n    main: \"index.js\",\r\n    id: \"\",\r\n    name: \"MediaHiderPlugin\",\r\n    author: \"Salt\",\r\n    authorId: \"\",\r\n    authorLink: \"\",\r\n    version: \"0.1\",\r\n    description: \"Hide Media\",\r\n    website: \"\",\r\n    source: \"\",\r\n    patreon: \"\",\r\n    donate: \"\",\r\n    invite: \"\",\r\n\r\n    changelog: [],\r\n    defaultConfig: [],\r\n    main: \"index.js\",\r\n};\r\nclass Dummy {\r\n    constructor() {\r\n        this._config = config;\r\n    }\r\n    start() {}\r\n    stop() {}\r\n}\r\n\r\nconst {\r\n    createCacheEntry,\r\n    getAllHiddenMediaObjects,\r\n    getHiddenMediaObject,\r\n    addHiddenMediaObject,\r\n    deleteHiddenMediaObject,\r\n} = require(\"../crudApi\");\r\n\r\nif (!global.ZeresPluginLibrary) {\r\n    BdApi.showConfirmationModal(\r\n        \"Library Missing\",\r\n        `The library plugin needed for ${\r\n            config.name ?? config.info.name\r\n        } is missing. Please click Download Now to install it.`,\r\n        {\r\n            confirmText: \"Download Now\",\r\n            cancelText: \"Cancel\",\r\n            onConfirm: () => {\r\n                require(\"request\").get(\r\n                    \"https://betterdiscord.app/gh-redirect?id=9\",\r\n                    async (err, resp, body) => {\r\n                        if (err)\r\n                            return require(\"electron\").shell.openExternal(\r\n                                \"https://betterdiscord.app/Download?id=9\"\r\n                            );\r\n                        if (resp.statusCode === 302) {\r\n                            require(\"request\").get(\r\n                                resp.headers.location,\r\n                                async (error, response, content) => {\r\n                                    if (error)\r\n                                        return require(\"electron\").shell.openExternal(\r\n                                            \"https://betterdiscord.app/Download?id=9\"\r\n                                        );\r\n                                    await new Promise((r) =>\r\n                                        require(\"fs\").writeFile(\r\n                                            require(\"path\").join(\r\n                                                BdApi.Plugins.folder,\r\n                                                \"0PluginLibrary.plugin.js\"\r\n                                            ),\r\n                                            content,\r\n                                            r\r\n                                        )\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            await new Promise((r) =>\r\n                                require(\"fs\").writeFile(\r\n                                    require(\"path\").join(\r\n                                        BdApi.Plugins.folder,\r\n                                        \"0PluginLibrary.plugin.js\"\r\n                                    ),\r\n                                    body,\r\n                                    r\r\n                                )\r\n                            );\r\n                        }\r\n                    }\r\n                );\r\n            },\r\n        }\r\n    );\r\n}\r\n\r\nmodule.exports = !global.ZeresPluginLibrary\r\n    ? Dummy\r\n    : (([Plugin, Api]) => {\r\n          const plugin = (Plugin, Library) => {\r\n              const { DOM, ContextMenu, Patcher, Data } = BdApi;\r\n              const { Logger } = Library;\r\n              //Data.load/save for the hide list.\r\n              this.savedData = new Set(Data.load(config.name, \"HiderList\"));\r\n              const HMstore = Array.from(this.savedData);\r\n              const HiddenMediaHTMLexpanded = `<div class=\"wrapper-30-Nkg cozy-VmLDNB zalgo-26OfGz MediaHiderWrapper\" role=\"article\">\r\n                <div class=\"contents-2MsGLg\">\r\n                    <div class=\"blockedSystemMessage-3FmE9n container-x059i8 cozy-S5wsfF\">\r\n                        <div class=\"iconContainer-2rPbqG\">\r\n                            <svg class=\"blockedIcon-cd-3B7\" aria-hidden=\"true\" role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                <path fill=\"red\" d=\"M18.4 4L12 10.4L5.6 4L4 5.6L10.4 12L4 18.4L5.6 20L12 13.6L18.4 20L20 18.4L13.6 12L20 5.6L18.4 4Z\">\r\n                                </path>\r\n                            </svg>\r\n                        </div>\r\n                        <div class=\"content-vSHmMD\">\r\n                            <div class=\"blockedMessageText-3Zeg3y\">\r\n                                Hidden Media — \r\n                                <span class=\"blockedAction-2cPk2G\" \r\n                                role=\"button\" tabindex=\"0\">\r\n                                    Show/Hide media\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n              const MessageAccessorySelector =\r\n                  \"div > div[id*=message-accessories]\";\r\n              const imageMediaSelector =\r\n                  \":not(article *) > div:not([class*=grid]) > div[class*=imageContent]:not([class*=embedVideo]) div[class*=clickableWrapper] img\";\r\n              const stickerSelector = \"span[class*=clickableSticker] img\";\r\n              const embedMediaSelector =\r\n                  \"article div[class*=clickableWrapper] img\";\r\n              const embedVideoSelector =\r\n                  \"article[class*=embed] video, article div[class*=embedVideo] div[class*=wrapper] video\";\r\n              const videoMediaSelector =\r\n                  \"div[class*=inlineMediaEmbed] div[class*=imageWrapper]  div[class*=clickableWrapper]  video[class*=embedVideo], div[class*=inlineMediaEmbed] div[class*=imageWrapper]  div[class*=wrapper] video, div[class*=messageAttachment] div[class*=wrapper] video\";\r\n\r\n              /* const MessageAccessorySelector =\r\n                  \"div > div[id*=message-accessories]\";\r\n              const imageMediaSelector =\r\n                  \":not(article *) > div:not([class*=grid]) > div[class*=imageContent]:not([class*=embedVideo]) a\";\r\n              const stickerSelector = \"span[class*=clickableSticker] img\";\r\n              const embedMediaSelector =\r\n                  \"article div[class*=clickableWrapper] img\";\r\n              const embedVideoSelector =\r\n                  \"article[class*=embed] video, article div[class*=embedVideo] div[class*=wrapper] video\";\r\n              const videoMediaSelector =\r\n                  \"div[class*=inlineMediaEmbed] div[class*=imageWrapper]  div[class*=clickableWrapper]  video[class*=embedVideo], div[class*=inlineMediaEmbed] div[class*=imageWrapper]  div[class*=wrapper] video, div[class*=messageAttachment] div[class*=wrapper] video\";\r\n               */\r\n              return class MediaHider extends Plugin {\r\n                  // Detects Li in current channel\r\n                  checkCurrentChannel(mutations) {\r\n                      // for each mutation\r\n                      for (let mutation of mutations) {\r\n                          // if addedNodes exists\r\n                          if (mutation.addedNodes.length !== 0) {\r\n                              for (\r\n                                  let i = 0;\r\n                                  i < mutation.addedNodes.length;\r\n                                  i++\r\n                              ) {\r\n                                  let addedNode = mutation.addedNodes[i];\r\n                                  if (\r\n                                      (addedNode.tagName === \"MAIN\" &&\r\n                                          addedNode.className.includes(\r\n                                              \"chatContent\"\r\n                                          )) ||\r\n                                      (addedNode.tagName === \"LI\" &&\r\n                                          addedNode.className.includes(\r\n                                              \"messageListItem\"\r\n                                          ) &&\r\n                                          mutation.type === \"childList\")\r\n                                  ) {\r\n                                      // the ol containing the li items\r\n                                      const ChatMessageList =\r\n                                          document.querySelector(\r\n                                              \"main > div > div > div > ol\"\r\n                                          );\r\n                                      // the li items\r\n                                      const CMLli =\r\n                                          ChatMessageList.querySelectorAll(\r\n                                              \"li\"\r\n                                          );\r\n                                      // do this to each li in the list\r\n                                      CMLli.forEach((li) => {\r\n                                          const MessageAccessory =\r\n                                              li.querySelector(\r\n                                                  MessageAccessorySelector\r\n                                              );\r\n\r\n                                          const imageMedia =\r\n                                              MessageAccessory.querySelector(\r\n                                                  imageMediaSelector\r\n                                              );\r\n                                          const sticker =\r\n                                              MessageAccessory.querySelector(\r\n                                                  stickerSelector\r\n                                              );\r\n                                          //TODO this one does not work after the vid is clicked\r\n                                          const embedMedia =\r\n                                              MessageAccessory.querySelector(\r\n                                                  embedMediaSelector\r\n                                              );\r\n                                          const embedVideo =\r\n                                              MessageAccessory.querySelector(\r\n                                                  embedVideoSelector\r\n                                              );\r\n                                          const videoMedia =\r\n                                              MessageAccessory.querySelector(\r\n                                                  videoMediaSelector\r\n                                              );\r\n                                          // needs Media to trigger block\r\n                                          if (\r\n                                              MessageAccessory.children\r\n                                                  .length !== 0\r\n                                          ) {\r\n                                              // execute iff valid selector\r\n                                              if (\r\n                                                  !!imageMedia ||\r\n                                                  !!sticker ||\r\n                                                  !!embedMedia ||\r\n                                                  !!embedVideo ||\r\n                                                  !!videoMedia\r\n                                              ) {\r\n                                                  // use this var to prevent code repetition\r\n                                                  var url;\r\n                                                  // These pass the media link to the var\r\n                                                  if (!!imageMedia) {\r\n                                                      Logger.info(\r\n                                                          \"imageMedia: \",\r\n                                                          imageMedia\r\n                                                      );\r\n                                                      url = imageMedia.href;\r\n                                                  }\r\n                                                  if (!!sticker) {\r\n                                                      Logger.info(\r\n                                                          \"sticker: \",\r\n                                                          sticker\r\n                                                      );\r\n                                                      url = sticker.src;\r\n                                                  }\r\n                                                  if (!!embedMedia) {\r\n                                                      Logger.info(\r\n                                                          \"embedMedia: \",\r\n                                                          embedMedia\r\n                                                      );\r\n                                                      url = embedMedia.src;\r\n                                                  }\r\n                                                  if (!!embedVideo) {\r\n                                                      Logger.info(\r\n                                                          \"embedVideo: \",\r\n                                                          embedVideo\r\n                                                      );\r\n                                                      url = embedVideo.src;\r\n                                                  }\r\n                                                  if (!!videoMedia) {\r\n                                                      Logger.info(\r\n                                                          \"videoMedia: \",\r\n                                                          videoMedia\r\n                                                      );\r\n                                                      url = videoMedia.src;\r\n                                                  }\r\n                                                  // only triggers if url is mutated by the previous block\r\n                                                  if (url !== undefined) {\r\n                                                      createCacheEntry(url);\r\n                                                      const isHidden =\r\n                                                          getHiddenMediaObject(\r\n                                                              url\r\n                                                          );\r\n                                                      //Logger.info(\"Url is: \",url);\r\n                                                      //const isHidden = HMstore.includes(url);\r\n\r\n                                                      // if hidden media is detected and there is not already a MediaHiderWrapper: hides element\r\n                                                      if (\r\n                                                          isHidden &&\r\n                                                          li.querySelector(\r\n                                                              \"div[class*=MediaHiderWrapper]\"\r\n                                                          ) === null\r\n                                                      ) {\r\n                                                          // creates Wrapper\r\n                                                          const Wrapper =\r\n                                                              DOM.parseHTML(\r\n                                                                  HiddenMediaHTMLexpanded,\r\n                                                                  true\r\n                                                              );\r\n                                                          Wrapper.appendChild(\r\n                                                              MessageAccessory\r\n                                                          );\r\n\r\n                                                          const Message =\r\n                                                              li.querySelector(\r\n                                                                  \"div[class*=message]\"\r\n                                                              );\r\n                                                          // appending here preserves css styling\r\n                                                          Message.append(\r\n                                                              Wrapper\r\n                                                          );\r\n                                                          if (\r\n                                                              document.readyState !==\r\n                                                              \"loading\"\r\n                                                          ) {\r\n                                                              const MHspan =\r\n                                                                  Message.querySelector(\r\n                                                                      \"span[class*=blockedAction]\"\r\n                                                                  );\r\n                                                              MessageAccessory.style.display =\r\n                                                                  \"none\";\r\n                                                              const toggleShow =\r\n                                                                  function () {\r\n                                                                      MessageAccessory\r\n                                                                          .style\r\n                                                                          .display ===\r\n                                                                      \"none\"\r\n                                                                          ? (MessageAccessory.style.display =\r\n                                                                                \"block\")\r\n                                                                          : (MessageAccessory.style.display =\r\n                                                                                \"none\");\r\n                                                                  };\r\n\r\n                                                              MHspan.addEventListener(\r\n                                                                  \"click\",\r\n                                                                  function () {\r\n                                                                      toggleShow();\r\n                                                                  },\r\n                                                                  false\r\n                                                              );\r\n                                                          }\r\n                                                      }\r\n                                                  }\r\n                                              }\r\n                                          }\r\n                                      });\r\n                                      Logger.info(\r\n                                          \"chat window or message loaded\"\r\n                                      );\r\n                                  }\r\n                              }\r\n                          }\r\n                      }\r\n                  }\r\n                  //TODO Triggers multiple times and in multi-media posts grabs the first item only\r\n                  patchMessageContextMenu() {\r\n                      this.contextMenuPatch = ContextMenu.patch(\r\n                          \"message\",\r\n                          (retVal, props) => {\r\n                              // TODO Find better solution\r\n                              const ParentLi = props.target.closest(\"li\");\r\n                              const MessageAccessory = ParentLi.querySelector(\r\n                                  MessageAccessorySelector\r\n                              );\r\n                              //re-name these as they are unclear\r\n                              const imageMedia =\r\n                                  MessageAccessory.querySelector(\r\n                                      imageMediaSelector\r\n                                  );\r\n                              // selects stickers\r\n                              const sticker =\r\n                                  MessageAccessory.querySelector(\r\n                                      stickerSelector\r\n                                  );\r\n                              //TODO this one does not work after the vid is clicked\r\n                              const embedMedia =\r\n                                  MessageAccessory.querySelector(\r\n                                      embedMediaSelector\r\n                                  );\r\n                              const embedVideo =\r\n                                  MessageAccessory.querySelector(\r\n                                      embedVideoSelector\r\n                                  );\r\n                              const videoMedia =\r\n                                  MessageAccessory.querySelector(\r\n                                      videoMediaSelector\r\n                                  );\r\n                              var targetUrl;\r\n                              var targetElement;\r\n                              // needs Media to trigger block\r\n                              if (MessageAccessory.children.length !== 0) {\r\n                                  // execute iff valid selector //\r\n                                  if (\r\n                                      !!imageMedia ||\r\n                                      !!sticker ||\r\n                                      !!embedMedia ||\r\n                                      !!embedVideo ||\r\n                                      !!videoMedia\r\n                                  ) {\r\n                                      // These pass the media link to the var\r\n                                      if (!!imageMedia) {\r\n                                          Logger.info(\r\n                                              \"imageMedia: \",\r\n                                              imageMedia\r\n                                          );\r\n                                          targetUrl = imageMedia.href;\r\n                                          targetElement = imageMedia;\r\n                                      }\r\n                                      if (!!sticker) {\r\n                                          Logger.info(\"sticker: \", sticker);\r\n                                          targetUrl = sticker.src;\r\n                                          targetElement = sticker;\r\n                                      }\r\n                                      if (!!embedMedia) {\r\n                                          Logger.info(\r\n                                              \"embedMedia: \",\r\n                                              embedMedia\r\n                                          );\r\n                                          targetUrl = embedMedia.src;\r\n                                          targetElement = embedMedia;\r\n                                      }\r\n                                      if (!!embedVideo) {\r\n                                          Logger.info(\r\n                                              \"embedVideo: \",\r\n                                              embedMedia\r\n                                          );\r\n                                          targetUrl = embedVideo.src;\r\n                                          targetElement = embedVideo;\r\n                                      }\r\n                                      if (!!videoMedia) {\r\n                                          Logger.info(\r\n                                              \"videoMedia: \",\r\n                                              videoMedia\r\n                                          );\r\n                                          targetUrl = videoMedia.src;\r\n                                          targetElement = videoMedia;\r\n                                      }\r\n                                      // only triggers if targetUrl is mutated by the previous block\r\n                                      if (targetUrl !== undefined) {\r\n                                          //Logger.info(\"targetUrl is: \",targetUrl );\r\n                                      }\r\n                                  }\r\n                              }\r\n                              //END OF AUTISM\r\n\r\n                              const hasHref = !!props.target.href;\r\n                              const hasAttachments =\r\n                                  props.message.attachments.length !== 0;\r\n                              const mAttachments = props.message.attachments;\r\n\r\n                              const hasEmbeds =\r\n                                  props.message.embeds.length !== 0;\r\n                              if (!hasHref && !hasAttachments && !hasEmbeds) {\r\n                                  return;\r\n                              }\r\n                              const HiddenMediaList =\r\n                                  getAllHiddenMediaObjects();\r\n                              //populates submenu with items from store\r\n                              const MediaHiderHiddenItems = [];\r\n                              for (var i = 0; HiddenMediaList.length > i; i++) {\r\n                                  const item = HiddenMediaList[i];\r\n                                  const MediaFileName = item.url.slice(\r\n                                      item.url.lastIndexOf(\"/\") + 1,\r\n                                      item.url.length\r\n                                  );\r\n\r\n                                  const label = item.url;\r\n                                  // individual item/ unhider logic\r\n                                  const MHHitem = ContextMenu.buildItem({\r\n                                      label: MediaFileName,\r\n                                      id: `MHHi-${i}`,\r\n                                      closeOnClick: false,\r\n\r\n                                      action: (e) => {\r\n                                          // Modal for removing media from list\r\n                                          BdApi.showConfirmationModal(\r\n                                              \"Remove this from the hide list?\",\r\n                                              `${MediaFileName}`,\r\n                                              {\r\n                                                  confirmText: \"Unhide\",\r\n                                                  cancelText: \"Cancel\",\r\n                                                  //logic for removing from hide list\r\n                                                  onConfirm: () => {\r\n                                                      const index =\r\n                                                          HiddenMediaList.indexOf(\r\n                                                              item\r\n                                                          );\r\n\r\n                                                      if (index > -1) {\r\n                                                          const PresentLinks =\r\n                                                              document.querySelectorAll(\r\n                                                                  \"a, img, video\"\r\n                                                              );\r\n                                                          for (let item of PresentLinks) {\r\n                                                              if (\r\n                                                                  item.href ===\r\n                                                                      label ||\r\n                                                                  item.src ===\r\n                                                                      label\r\n                                                              ) {\r\n                                                                  const UnHidParentLi =\r\n                                                                      item.closest(\r\n                                                                          \"li\"\r\n                                                                      );\r\n                                                                  if (\r\n                                                                      UnHidParentLi !==\r\n                                                                      null\r\n                                                                  ) {\r\n                                                                      const Wrapper =\r\n                                                                          UnHidParentLi.querySelector(\r\n                                                                              \"div[class*=MediaHiderWrapper]\"\r\n                                                                          );\r\n                                                                      Wrapper.remove();\r\n                                                                      const MA =\r\n                                                                          UnHidParentLi.querySelector(\r\n                                                                              \"div > div[id*=message-accessories]\"\r\n                                                                          );\r\n                                                                      MA.style.display =\r\n                                                                          \"block\";\r\n                                                                  }\r\n                                                              }\r\n                                                          }\r\n                                                          deleteHiddenMediaObject(\r\n                                                              item.url\r\n                                                          );\r\n                                                      }\r\n                                                  },\r\n                                              }\r\n                                          );\r\n                                      },\r\n                                  });\r\n                                  MediaHiderHiddenItems.push(MHHitem);\r\n                              }\r\n\r\n                              const MediaHiderButton = ContextMenu.buildItem({\r\n                                  type: \"text\",\r\n                                  label: \"Hide Media\",\r\n                                  action: (e) => {\r\n                                      //Modal for confirming hide\r\n                                      BdApi.showConfirmationModal(\r\n                                          \"Hide this media?\",\r\n                                          `link`,\r\n                                          {\r\n                                              confirmText: \"Hide\",\r\n                                              cancelText: \"Cancel\",\r\n                                              danger: true,\r\n                                              onConfirm: () => {\r\n                                                  const HiddenMediaList =\r\n                                                      getAllHiddenMediaObjects();\r\n\r\n                                                  const mediaLink = targetUrl;\r\n                                                  // check if url is already in list\r\n                                                  if (\r\n                                                      !HiddenMediaList.hasOwnProperty(\r\n                                                          mediaLink\r\n                                                      )\r\n                                                  ) {\r\n                                                      addHiddenMediaObject(\r\n                                                          mediaLink\r\n                                                      );\r\n                                                      this.onHide(\r\n                                                          ParentLi,\r\n                                                          MessageAccessory\r\n                                                      );\r\n                                                  }\r\n                                              },\r\n                                          }\r\n                                      );\r\n                                  },\r\n                              });\r\n                              // Item that displays the submenu parent\r\n                              const MediaHiderListContextSubMenu =\r\n                                  ContextMenu.buildItem({\r\n                                      type: \"submenu\",\r\n                                      label: \"Hidden Media List\",\r\n                                      children: MediaHiderHiddenItems,\r\n                                  });\r\n                              //pushes the created components to the menu\r\n                              retVal.props.children[2].props.children.push(\r\n                                  ContextMenu.buildItem({ type: \"separator\" }),\r\n                                  MediaHiderButton,\r\n                                  MediaHiderListContextSubMenu\r\n                              );\r\n                          }\r\n                      );\r\n                  }\r\n\r\n                  getSettingsPanel() {\r\n                      return this.buildSettingsPanel().getElement();\r\n                  }\r\n\r\n                  onHide(li, MessageAccessory) {\r\n                      const HMelement = DOM.parseHTML(\r\n                          HiddenMediaHTMLexpanded,\r\n                          true\r\n                      );\r\n\r\n                      HMelement.appendChild(MessageAccessory);\r\n                      const Message = li.querySelector(\"div[class*=message]\");\r\n                      Message.append(HMelement);\r\n                      if (document.readyState !== \"loading\") {\r\n                          const MHspan = Message.querySelector(\r\n                              \"span[class*=blockedAction]\"\r\n                          );\r\n                          MessageAccessory.style.display = \"none\";\r\n                          const toggleShow = function () {\r\n                              MessageAccessory.style.display === \"none\"\r\n                                  ? (MessageAccessory.style.display = \"block\")\r\n                                  : (MessageAccessory.style.display = \"none\");\r\n                          };\r\n\r\n                          MHspan.addEventListener(\r\n                              \"click\",\r\n                              function () {\r\n                                  toggleShow();\r\n                              },\r\n                              false\r\n                          );\r\n                      }\r\n                  }\r\n\r\n                  onStart() {\r\n                      this.patchMessageContextMenu();\r\n                      Data.load(config.name, \"HiderList\");\r\n                      //observer\r\n                      this.channelObserver = new MutationObserver(\r\n                          this.checkCurrentChannel\r\n                      );\r\n                      //observer target\r\n                      const Chat = document.querySelector(\"div[class*=chat]\");\r\n                      //observer options\r\n                      const options = {\r\n                          childList: true,\r\n                          subtree: true,\r\n                      };\r\n                      this.channelObserver.observe(Chat, options);\r\n                  }\r\n\r\n                  onStop() {\r\n                      // stop and remove everything added by the plugin\r\n                      this.contextMenuPatch?.();\r\n                      this.channelObserver.disconnect();\r\n                      const addedElements = document.querySelectorAll(\r\n                          \"div#message-Block-Media\"\r\n                      );\r\n                      for (const el of addedElements) el && el.remove();\r\n                      Patcher.unpatchAll(this.name);\r\n                  }\r\n              };\r\n          };\r\n          return plugin(Plugin, Api);\r\n      })(global.ZeresPluginLibrary.buildPlugin(config));\r\n/*@end@*/\r\n\r\n/*  \r\n                  imageToUint8array(mediaElement) {\r\n                      const canvas = document.createElement(\"canvas\");\r\n                      const ElementWidth =\r\n                          mediaElement.naturalWidth ??\r\n                          mediaElement.width ??\r\n                          mediaElement.style.maxWidth ??\r\n                          mediaElement.closest(\"div\").style.width;\r\n                      const ElementHeight =\r\n                          mediaElement.naturalHeight ??\r\n                          mediaElement.height ??\r\n                          mediaElement.style.maxHeight ??\r\n                          mediaElement.closest(\"div\").style.height;\r\n                      var newElement;\r\n                      if (mediaElement.nodeName === \"VIDEO\") {\r\n                          newElement = document.createElement(\"video\");\r\n                      } else {\r\n                          newElement = new Image();\r\n                      }\r\n                      canvas.width = ElementWidth;\r\n                      canvas.height = ElementHeight;\r\n                      const context = canvas.getContext(\"2d\");\r\n                      context.width = ElementWidth;\r\n                      context.height = ElementHeight;\r\n                      newElement.crossOrigin = \"anonymous\";\r\n                      newElement.src = mediaElement.src;\r\n                      newElement.width = ElementWidth;\r\n                      newElement.height = ElementHeight;\r\n                      newElement.style.aspectRatio =\r\n                          mediaElement.style.aspectRatio;\r\n                      if (newElement.nodeName === \"VIDEO\") {\r\n                          newElement.poster = mediaElement.poster;\r\n                      }\r\n                      document.body.append(newElement);\r\n                      Logger.info(\"newElement: \", newElement);\r\n                      newElement.onload = function () {\r\n                          context.drawImage(newElement, 0, 0);\r\n                          const DataURL = canvas.toDataURL(\"image/png\");\r\n                          Logger.info(\"DataURL: \", DataURL);\r\n                      };\r\n                      const Uint8 = new Uint8Array(\r\n                          context.getImageData(\r\n                              0,\r\n                              0,\r\n                              ElementWidth,\r\n                              ElementHeight\r\n                          ).data.buffer\r\n                      );\r\n                      context.clearRect(0, 0, canvas.width, canvas.height);\r\n                      canvas.remove();\r\n                      newElement.remove();\r\n                      return Uint8;\r\n                  }\r\n                  //TODO Pulled from the internet, does not work, fix after the step above\r\n                  hash(filename, Uint8Array) {\r\n                      const newArray = Array.from(Uint8Array);\r\n                      const ArrayForHash = newArray.push(filename);\r\n                      var hash = 0,\r\n                          i,\r\n                          chr;\r\n                      if (ArrayForHash.length === 0) return hash;\r\n                      for (i = 0; i < ArrayForHash.length; i++) {\r\n                          chr = this.charCodeAt(i);\r\n                          hash = (hash << 5) - hash + chr;\r\n                          hash |= 0; // Convert to 32bit integer\r\n                      }\r\n                      return hash;\r\n                  }\r\n */\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/MediaHiderPlugin.plugin.js\");\n",""],"names":[],"sourceRoot":""}